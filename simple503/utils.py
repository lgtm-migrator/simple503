#!/usr/bin/env python3
#
#  utils.py
"""
Utility functions.
"""
#
#  Copyright © 2021 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
#  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
#  OR OTHER DEALINGS IN THE SOFTWARE.
#

# stdlib
import re
from typing import List, Tuple

# 3rd party
from cawdrey.header_mapping import HeaderMapping
from domdf_python_tools.paths import PathPlus
from domdf_python_tools.typing import PathLike
from domdf_python_tools.utils import divide

__all__ = ["cleanup", "load_metadata"]

WSP = " \t"


def cleanup(directory: PathLike):
	"""
	Cleanup files generated by ``simple503`` in the directory.

	This entails removing:

	* all ``index.html`` files
	* all ``.whl.metadata`` files
	* all empty directories.

	:param directory:
	"""

	directory = PathPlus(directory).abspath()

	for filename in directory.rglob("**/*"):
		if not filename.is_file():
			continue

		if filename.match("**/index.html"):
			filename.unlink()
		elif filename.match("**/*.whl.metadata"):
			filename.unlink()

	for filename in directory.rglob("**/*"):
		if not filename.is_dir():
			continue

		if next(filename.iterdir(), None) is None:
			filename.rmdir()


def load_metadata(rawtext: str) -> Tuple[HeaderMapping, str]:
	"""
	Parse Python core metadata from the given string.

	:param rawtext:

	:returns: A mapping of the metadata fields, and the long description
	"""

	delimiter = "\n\n"

	if delimiter in rawtext:
		rawtext, body = rawtext.split(delimiter, maxsplit=1)
	else:
		body = ''

	# unfold per RFC 5322 § 2.2.3
	rawtext = re.sub(rf"\n([{WSP}])", r"\1", rawtext)

	file_content: List[str] = rawtext.split('\n')
	file_content.reverse()

	fields: HeaderMapping[str] = HeaderMapping()

	while file_content:
		line = file_content.pop()

		field_name, field_value = divide(line, ':')
		fields[field_name] = field_value.lstrip()

	return fields, body
